{
	"info": {
		"_postman_id": "5b4dbb31-0d24-4d36-bddd-b6c47c5f3248",
		"name": "Dmoney-API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "9523516"
	},
	"item": [
		{
			"name": "Login to the system",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"var token = jsonData.token;\r",
							"pm.collectionVariables.set(\"token\",token)\r",
							"pm.environment.set(\"token\",token)\r",
							"\r",
							"pm.test(\"User can login successfully\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.message).to.contains(\"Login successfully\");\r",
							"});\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\":\"salman@grr.la\",\r\n    \"password\":\"1234\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/user/login",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"user",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create New Customer Successfully",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"User should be created successfully\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.message).to.contains(\"User created successfully\");\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"var id = jsonData.user.id;\r",
							"var phonenumber = jsonData.user.phone_number;\r",
							"pm.collectionVariables.set(\"userId\",id);\r",
							"pm.collectionVariables.set(\"customer_phone_number\",phonenumber);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var randomID = _.random(10000,99999)\r",
							"var phoneNumber = \"0152\"+_.random(1000000,9999999)\r",
							"\r",
							"pm.collectionVariables.set(\"randomID\",randomID)\r",
							"pm.collectionVariables.set(\"phoneNumber\",phoneNumber)\r",
							"\r",
							"pm.environment.set(\"randomID\",randomID)\r",
							"pm.environment.set(\"phoneNumber\",phoneNumber)"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "{{token}}",
						"type": "text"
					},
					{
						"key": "X-AUTH-SECRET-KEY",
						"value": "{{secretKey}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Test Customer 1\",\r\n    \"email\": \"az{{randomID}}@mail.com\",\r\n    \"password\": \"12345\",\r\n    \"phone_number\": \"{{phoneNumber}}\",\r\n    \"nid\":\"123456789\",\r\n    \"role\":\"Customer\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/user/create",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"user",
						"create"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Second Customer",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"User should be created successfully\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.message).to.contains(\"User created successfully\");\r",
							"});\r",
							"\r",
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"var another_id = jsonData.user.id;\r",
							"var another_phoneNumber = jsonData.user.phone_number;\r",
							"pm.collectionVariables.set(\"another_userId\",another_id);\r",
							"pm.collectionVariables.set(\"another_phoneNumber\",another_phoneNumber);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var another_randomID = _.random(10000,99999)\r",
							"var another_phoneNumber = \"0152\"+_.random(1000000,9999999)\r",
							"\r",
							"pm.collectionVariables.set(\"another_randomID\",another_randomID)\r",
							"pm.collectionVariables.set(\"another_phoneNumber\",another_phoneNumber)\r",
							"\r",
							"pm.environment.set(\"another_randomID\",another_randomID)\r",
							"pm.environment.set(\"another_phoneNumber\",another_phoneNumber)"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "{{token}}",
						"type": "text"
					},
					{
						"key": "X-AUTH-SECRET-KEY",
						"value": "{{secretKey}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Test Customer 2\",\r\n    \"email\": \"az{{another_randomID}}@mail.com\",\r\n    \"password\": \"12345\",\r\n    \"phone_number\": \"{{another_phoneNumber}}\",\r\n    \"nid\":\"123456789\",\r\n    \"role\":\"Customer\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/user/create",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"user",
						"create"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create New Agent Successfully",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							"var id = jsonData.user.id;\r",
							"var phonenumber = jsonData.user.phone_number;\r",
							"pm.collectionVariables.set(\"agentId\",id);\r",
							"pm.collectionVariables.set(\"agent_phone_number\",phonenumber);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var randomID = _.random(10000,99999)\r",
							"var phoneNumber = \"0179\"+_.random(1000000,9999999)\r",
							"\r",
							"pm.collectionVariables.set(\"randomID\",randomID)\r",
							"pm.collectionVariables.set(\"phoneNumber\",phoneNumber)\r",
							"\r",
							"pm.environment.set(\"randomID\",randomID)\r",
							"pm.environment.set(\"phoneNumber\",phoneNumber)"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "{{token}}",
						"type": "text"
					},
					{
						"key": "X-AUTH-SECRET-KEY",
						"value": "{{secretKey}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Test Agent 1\",\r\n    \"email\": \"agent{{randomID}}@mail.com\",\r\n    \"password\": \"12345\",\r\n    \"phone_number\": \"{{phoneNumber}}\",\r\n    \"nid\":\"123456789\",\r\n    \"role\":\"Agent\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/user/create",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"user",
						"create"
					]
				}
			},
			"response": []
		},
		{
			"name": "Show User List",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Showing user list\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.message).to.eql(\"User list\");\r",
							"});\r",
							"\r",
							"pm.test(\"User data is showing\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.users[0].id).to.eql(45);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "{{token}}",
						"type": "text"
					},
					{
						"key": "X-AUTH-SECRET-KEY",
						"value": "{{secretKey}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}/user/list",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"user",
						"list"
					]
				}
			},
			"response": []
		},
		{
			"name": "Deposit to Agent from system",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"Deposit successful message\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.message).to.contains(\"Deposit successful\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "X-AUTH-SECRET-KEY",
						"value": "{{secretKey}}",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "{{token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"from_account\":\"SYSTEM\",\r\n    \"to_account\":\"{{agent_phone_number}}\",\r\n    \"amount\":5000\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/transaction/deposit",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"transaction",
						"deposit"
					]
				}
			},
			"response": []
		},
		{
			"name": "Check Agent Balance",
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "{{token}}",
						"type": "text"
					},
					{
						"key": "X-AUTH-SECRET-KEY",
						"value": "{{secretKey}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}/transaction/balance/{{agent_phone_number}}",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"transaction",
						"balance",
						"{{agent_phone_number}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Check Customer Balance before deposit",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Shows user balance\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"User balance\");\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"var before_balance = jsonData.balance;\r",
							"pm.collectionVariables.set(\"before_balance\",before_balance);\r",
							"pm.environment.set(\"before_balance\",before_balance)"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "{{token}}",
						"type": "text"
					},
					{
						"key": "X-AUTH-SECRET-KEY",
						"value": "{{secretKey}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{baseURL}}/transaction/balance/{{customer_phone_number}}",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"transaction",
						"balance",
						"{{customer_phone_number}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Deposit to Customer",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Customer deposit is successfull\",()=>{\r",
							"    var jsonData = pm.response.json();\r",
							"    var message = jsonData.message;\r",
							"    pm.expect(message).contains(\"Deposit successful\")\r",
							"});\r",
							"\r",
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "X-AUTH-SECRET-KEY",
						"value": "{{secretKey}}",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "{{token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"from_account\":\"{{agent_phone_number}}\",\r\n    \"to_account\":\"{{customer_phone_number}}\",\r\n    \"amount\":2000\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/transaction/deposit",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"transaction",
						"deposit"
					]
				}
			},
			"response": []
		},
		{
			"name": "Check Customer Balance after deposit",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Shows user balance\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"User balance\");\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "{{token}}",
						"type": "text"
					},
					{
						"key": "X-AUTH-SECRET-KEY",
						"value": "{{secretKey}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{baseURL}}/transaction/balance/{{customer_phone_number}}",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"transaction",
						"balance",
						"{{customer_phone_number}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Deposit to Customer with amount greater than agent account has",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Insufficient balance\",()=>{\r",
							"    var jsonData = pm.response.json();\r",
							"    var message = jsonData.message;\r",
							"    pm.expect(message).contains(\"Insufficient balance\")\r",
							"});\r",
							"\r",
							"pm.test(\"Status code is 208\", function () {\r",
							"    pm.response.to.have.status(208);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "X-AUTH-SECRET-KEY",
						"value": "{{secretKey}}",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "{{token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"from_account\":\"{{agent_phone_number}}\",\r\n    \"to_account\":\"{{customer_phone_number}}\",\r\n    \"amount\":81000\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/transaction/deposit",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"transaction",
						"deposit"
					]
				}
			},
			"response": []
		},
		{
			"name": "Money withdraw by customer from agent",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Insufficient balance\",()=>{\r",
							"    var jsonData = pm.response.json();\r",
							"    var message = jsonData.message;\r",
							"    pm.expect(message).contains(\"Withdraw successful\")\r",
							"});\r",
							"\r",
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "X-AUTH-SECRET-KEY",
						"value": "{{secretKey}}",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "{{token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"from_account\":\"{{customer_phone_number}}\",\r\n    \"to_account\":\"{{agent_phone_number}}\",\r\n    \"amount\":100\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/transaction/withdraw",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"transaction",
						"withdraw"
					]
				}
			},
			"response": []
		},
		{
			"name": "Send money from one customer to another customer",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Send money successful\",()=>{\r",
							"    var jsonData = pm.response.json();\r",
							"    var message = jsonData.message;\r",
							"    pm.expect(message).contains(\"Send money successful\")\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "X-AUTH-SECRET-KEY",
						"value": "{{secretKey}}",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "{{token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"from_account\":\"{{customer_phone_number}}\",\r\n    \"to_account\":\"{{another_phoneNumber}}\",\r\n    \"amount\":10\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/transaction/sendmoney",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"transaction",
						"sendmoney"
					]
				}
			},
			"response": []
		},
		{
			"name": "Send money from invalid customer to valid customer",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Send money successful\",()=>{\r",
							"    var jsonData = pm.response.json();\r",
							"    var message = jsonData.message;\r",
							"    pm.expect(message).contains(\"Send money successful\")\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "X-AUTH-SECRET-KEY",
						"value": "{{secretKey}}",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "{{token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"from_account\":\"\",\r\n    \"to_account\":\"{{another_phoneNumber}}\",\r\n    \"amount\":50\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/transaction/sendmoney",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"transaction",
						"sendmoney"
					]
				}
			},
			"response": []
		},
		{
			"name": "Send money from one customer to another customer with negative or 0 amount",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Minimum amount 10 tk\",()=>{\r",
							"    var jsonData = pm.response.json();\r",
							"    var message = jsonData.message;\r",
							"    pm.expect(message).contains(\"Minimum amount 10 tk\")\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "X-AUTH-SECRET-KEY",
						"value": "{{secretKey}}",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "{{token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"from_account\":\"{{customer_phone_number}}\",\r\n    \"to_account\":\"{{another_phoneNumber}}\",\r\n    \"amount\":-10\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/transaction/sendmoney",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"transaction",
						"sendmoney"
					]
				}
			},
			"response": []
		},
		{
			"name": "Send money with customer having less balance than sent money amount",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Insufficient balance\",()=>{\r",
							"    var jsonData = pm.response.json();\r",
							"    var message = jsonData.message;\r",
							"    pm.expect(message).contains(\"Insufficient balance\")\r",
							"});\r",
							"\r",
							"pm.test(\"Status code is 208\", function () {\r",
							"    pm.response.to.have.status(208);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "X-AUTH-SECRET-KEY",
						"value": "{{secretKey}}",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "{{token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"from_account\":\"{{customer_phone_number}}\",\r\n    \"to_account\":\"{{another_phoneNumber}}\",\r\n    \"amount\":60000\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/transaction/sendmoney",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"transaction",
						"sendmoney"
					]
				}
			},
			"response": []
		},
		{
			"name": "Check Second Customer Balance",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Shows user balance\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"User balance\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "{{token}}",
						"type": "text"
					},
					{
						"key": "X-AUTH-SECRET-KEY",
						"value": "{{secretKey}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{baseURL}}/transaction/balance/{{another_phoneNumber}}",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"transaction",
						"balance",
						"{{another_phoneNumber}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Deposit to Invalid Agent",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"Invalid account\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.message).to.contains(\"Account does not exist\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "X-AUTH-SECRET-KEY",
						"value": "{{secretKey}}",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "{{token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"from_account\":\"SYSTEM\",\r\n    \"to_account\":\"jjdsjd\",\r\n    \"amount\":100000\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/transaction/deposit",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"transaction",
						"deposit"
					]
				}
			},
			"response": []
		},
		{
			"name": "Deposit to Agent with blank info",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 208\", function () {\r",
							"    pm.response.to.have.status(208);\r",
							"});\r",
							"\r",
							"pm.test(\"Blank info\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.message).to.contains(\"From account and to account cannot be same\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "X-AUTH-SECRET-KEY",
						"value": "{{secretKey}}",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "{{token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"from_account\":\"\",\r\n    \"to_account\":\"\",\r\n    \"amount\":\"\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/transaction/deposit",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"transaction",
						"deposit"
					]
				}
			},
			"response": []
		},
		{
			"name": "Deposit to Agent with negative amount",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 208\", function () {\r",
							"    pm.response.to.have.status(208);\r",
							"});\r",
							"\r",
							"pm.test(\"Negative deposit\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.message).to.contains(\"Minimum deposit amount 10 tk\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "X-AUTH-SECRET-KEY",
						"value": "{{secretKey}}",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "{{token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"from_account\":\"SYSTEM\",\r\n    \"to_account\":\"{{agent_phone_number}}\",\r\n    \"amount\":-5000\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/transaction/deposit",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"transaction",
						"deposit"
					]
				}
			},
			"response": []
		},
		{
			"name": "Deposit to Customer from invalid or blank agent account",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Account does not exist\",()=>{\r",
							"    var jsonData = pm.response.json();\r",
							"    var message = jsonData.message;\r",
							"    pm.expect(message).contains(\"Account does not exist\")\r",
							"});\r",
							"\r",
							"pm.test(\"Status code is 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "X-AUTH-SECRET-KEY",
						"value": "{{secretKey}}",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "{{token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"from_account\":\"fdfgd\",\r\n    \"to_account\":\"{{customer_phone_number}}\",\r\n    \"amount\":100\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/transaction/deposit",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"transaction",
						"deposit"
					]
				}
			},
			"response": []
		},
		{
			"name": "Deposit to Customer from invalid or blank customer account",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Account does not exist\",()=>{\r",
							"    var jsonData = pm.response.json();\r",
							"    var message = jsonData.message;\r",
							"    pm.expect(message).contains(\"Account does not exist\")\r",
							"});\r",
							"\r",
							"pm.test(\"Status code is 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "X-AUTH-SECRET-KEY",
						"value": "{{secretKey}}",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "{{token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"from_account\":\"{{agent_phone_number}}\",\r\n    \"to_account\":\"gdfgdf\",\r\n    \"amount\":1000\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/transaction/deposit",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"transaction",
						"deposit"
					]
				}
			},
			"response": []
		},
		{
			"name": "Deposit to Customer with 0 or negative amount",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Insufficient money sent\",()=>{\r",
							"    var jsonData = pm.response.json();\r",
							"    var message = jsonData.message;\r",
							"    pm.expect(message).contains(\"Minimum deposit amount 10 tk\")\r",
							"});\r",
							"\r",
							"pm.test(\"Status code is 208\", function () {\r",
							"    pm.response.to.have.status(208);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "X-AUTH-SECRET-KEY",
						"value": "{{secretKey}}",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "{{token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"from_account\":\"{{agent_phone_number}}\",\r\n    \"to_account\":\"{{customer_phone_number}}\",\r\n    \"amount\":-200\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/transaction/deposit",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"transaction",
						"deposit"
					]
				}
			},
			"response": []
		},
		{
			"name": "Money withdraw by customer from blank and invalid customer number",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Invalid agent account\",()=>{\r",
							"    var jsonData = pm.response.json();\r",
							"    var message = jsonData.message;\r",
							"    pm.expect(message).contains(\"Account does not exist\")\r",
							"});\r",
							"\r",
							"pm.test(\"Status code is 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "X-AUTH-SECRET-KEY",
						"value": "{{secretKey}}",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "{{token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"from_account\":\"jshfjdfhkdjsds\",\r\n    \"to_account\":\"{{agent_phone_number}}\",\r\n    \"amount\":100\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/transaction/withdraw",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"transaction",
						"withdraw"
					]
				}
			},
			"response": []
		},
		{
			"name": "Money withdraw by customer where withdraw money is greater than customer current balance",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Insufficient balance\",()=>{\r",
							"    var jsonData = pm.response.json();\r",
							"    var message = jsonData.message;\r",
							"    pm.expect(message).contains(\"Insufficient\")\r",
							"});\r",
							"\r",
							"pm.test(\"Status code is 208\", function () {\r",
							"    pm.response.to.have.status(208);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "X-AUTH-SECRET-KEY",
						"value": "{{secretKey}}",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "{{token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"from_account\":\"{{customer_phone_number}}\",\r\n    \"to_account\":\"{{agent_phone_number}}\",\r\n    \"amount\":5000\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/transaction/withdraw",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"transaction",
						"withdraw"
					]
				}
			},
			"response": []
		},
		{
			"name": "Money withdraw by customer where withdraw money is negative",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Insufficient balance\",()=>{\r",
							"    var jsonData = pm.response.json();\r",
							"    var message = jsonData.message;\r",
							"    pm.expect(message).contains(\"Minimum withdraw amount 10 tk\")\r",
							"});\r",
							"\r",
							"pm.test(\"Status code is 208\", function () {\r",
							"    pm.response.to.have.status(208);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "X-AUTH-SECRET-KEY",
						"value": "{{secretKey}}",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "{{token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"from_account\":\"{{customer_phone_number}}\",\r\n    \"to_account\":\"{{agent_phone_number}}\",\r\n    \"amount\":-100\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/transaction/withdraw",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"transaction",
						"withdraw"
					]
				}
			},
			"response": []
		},
		{
			"name": "Money withdraw by customer from blank and invalid agent number",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Invalid agent account\",()=>{\r",
							"    var jsonData = pm.response.json();\r",
							"    var message = jsonData.message;\r",
							"    pm.expect(message).contains(\"Account does not exist\")\r",
							"});\r",
							"\r",
							"pm.test(\"Status code is 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "X-AUTH-SECRET-KEY",
						"value": "{{secretKey}}",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "{{token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"from_account\":\"{{customer_phone_number}}\",\r\n    \"to_account\":\"fdgdgfd\",\r\n    \"amount\":690\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/transaction/withdraw",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"transaction",
						"withdraw"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Delete User\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.message).to.contains(\"User deleted successfully\");\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Authorization",
						"value": "{{token}}",
						"type": "text"
					},
					{
						"key": "X-AUTH-SECRET-KEY",
						"value": "{{secretKey}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}/user/delete/{{userId}}",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"user",
						"delete",
						"{{userId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Login with invalid/blank email and password",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"var token = jsonData.token;\r",
							"pm.collectionVariables.set(\"token\",token)\r",
							"pm.environment.set(\"token\",token)\r",
							"\r",
							"pm.test(\"User not found\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.message).to.contains(\"User not found\");\r",
							"});\r",
							"\r",
							"pm.test(\"Status code is 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\":\"ffff\",\r\n    \"password\":\"ioyyuyyuh\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/user/login",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"user",
						"login"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseURL",
			"value": "http://dmoney.professionaltrainingbd.com",
			"type": "string"
		},
		{
			"key": "token",
			"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6InNhbG1hbkBncnIubGEiLCJwYXNzd29yZCI6IjEyMzQiLCJpYXQiOjE2NjM3NjUyMTksImV4cCI6MTY2Mzc2NzAxOX0.jb-EgYkZ970cbBaEJPUY5xfUbwxJH-Yma6hVl_i6bR8"
		},
		{
			"key": "secretKey",
			"value": "ROADTOSDET",
			"type": "string"
		},
		{
			"key": "randomID",
			"value": 27408
		},
		{
			"key": "phoneNumber",
			"value": "01791687898"
		},
		{
			"key": "userId",
			"value": 5397
		},
		{
			"key": "customer_phone_number",
			"value": "01526646491"
		},
		{
			"key": "another_randomID",
			"value": 53702
		},
		{
			"key": "another_phoneNumber",
			"value": "01521892803"
		},
		{
			"key": "agentId",
			"value": 5399
		},
		{
			"key": "agent_phone_number",
			"value": "01791687898"
		},
		{
			"key": "another_userId",
			"value": 5398
		},
		{
			"key": "before_balance",
			"value": ""
		},
		{
			"key": "after_balance",
			"value": ""
		}
	]
}